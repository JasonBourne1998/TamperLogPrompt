{
    "auth.service.impl.TokenServiceImpl.getToken": {
        "class_name": "BasicAuthDto",
        "input": "public class BasicAuthDto{\n    private String username;\n    private String password;\n    private String verificationCode;\n}",
        "output": "public class TokenDto{\n    private static final long serialVersionUID = 8460179745119402516L;\n    private String userId;\n    private String username;\n    private String authorization;\n}"
    },
    "preserveOther.service.PreserveOtherServiceImpl.preserve":{
        "class_name": "OrderTicketsInfo",
        "input": "OrderTicketsInfo{\n    private String accountId;\n    private String contactsId;\n\n    private String tripId;\n\n    private int seatType;\n\n    private String loginToken;\n\n    private String date;\n\n    private String from;\n\n    private String to;\n    private int assurance;\n\n    private int foodType = 0;\n\n    private String stationName;\n\n    private String storeName;\n\n    private String foodName;\n\n    private double foodPrice;\n\n    private String handleDate;\n\n    private String consigneeName;\n\n    private String consigneePhone;\n\n    private double consigneeWeight;\n\n    private boolean isWithin;\n\n    public String getFrom() {\n        return StringUtils.String2Lower(this.from);\n    }\n\n    public String getTo() {\n        return StringUtils.String2Lower(this.to);\n    }\n}, authorization headers",
        "output": "Response(status,msg)"
    },
    "preserve.service.PreserveServiceImpl.preserve":{
        "class_name": "OrderTicketsInfo",
        "input": "OrderTicketsInfo{\n    private String accountId;\n    private String contactsId;\n\n    private String tripId;\n\n    private int seatType;\n\n    private String loginToken;\n\n    private String date;\n\n    private String from;\n\n    private String to;\n    private int assurance;\n\n    private int foodType = 0;\n\n    private String stationName;\n\n    private String storeName;\n\n    private String foodName;\n\n    private double foodPrice;\n\n    private String handleDate;\n\n    private String consigneeName;\n\n    private String consigneePhone;\n\n    private double consigneeWeight;\n\n    private boolean isWithin;\n\n    public String getFrom() {\n        return StringUtils.String2Lower(this.from);\n    }\n\n    public String getTo() {\n        return StringUtils.String2Lower(this.to);\n    }\n}, headers",
        "output": "Response(status,msg)"
    },
    "order.service.OrderServiceImpl.queryOrdersForRefresh":{
        "class_name": "OrderInfo",
        "input": "OrderInfo {\n\n    /**\n     * account id\n     */\n    private String loginId;\n\n    private String travelDateStart;\n\n    private String travelDateEnd;\n\n    private String boughtDateStart;\n\n    private String boughtDateEnd;\n\n    private int state;\n\n    private boolean enableTravelDateQuery;\n\n    private boolean enableBoughtDateQuery;\n\n    private boolean enableStateQuery;\n\n    public OrderInfo(){\n        //Default Constructor\n    }\n\n    public String getLoginId() {\n        return loginId;\n    }\n\n    public void setLoginId(String loginId) {\n        this.loginId = loginId;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n    public void enableTravelDateQuery(String startTime, String endTime){\n        enableTravelDateQuery = true;\n        travelDateStart = startTime;\n        travelDateEnd = endTime;\n    }\n\n    public void disableTravelDateQuery(){\n        enableTravelDateQuery = false;\n        travelDateStart = null;\n        travelDateEnd = null;\n    }\n\n    public void enableBoughtDateQuery(String startTime, String endTime){\n        enableBoughtDateQuery = true;\n        boughtDateStart = startTime;\n        boughtDateEnd = endTime;\n    }\n\n    public void disableBoughtDateQuery(){\n        enableBoughtDateQuery = false;\n        boughtDateStart = null;\n        boughtDateEnd = null;\n    }\n\n    public void enableStateQuery(int targetStatus){\n        enableStateQuery = true;\n        state = targetStatus;\n    }\n\n    public void disableStateQuery(){\n        enableTravelDateQuery = false;\n        state = -1;\n    }\n\n    public boolean isEnableTravelDateQuery() {\n        return enableTravelDateQuery;\n    }\n\n    public boolean isEnableBoughtDateQuery() {\n        return enableBoughtDateQuery;\n    }\n\n    public boolean isEnableStateQuery() {\n        return enableStateQuery;\n    }\n}, authorization",
        "output": "ArrayList<Order {\n\n    private String id;\n\n    private String boughtDate;\n\n    private String travelDate;\n\n    private String travelTime;\n\n    /**\n     * Which Account Bought it\n     */\n    private String accountId;\n\n    /**\n     * Tickets bought for whom....\n     */\n    private String contactsName;\n\n    private int documentType;\n\n    private String contactsDocumentNumber;\n\n    private String trainNumber;\n\n    private int coachNumber;\n\n    private int seatClass;\n\n    private String seatNumber;\n\n    private String from;\n\n    private String to;\n\n    private int status;\n\n    private String price;\n\n    private String differenceMoney;\n\n    public Order(){\n        boughtDate = StringUtils.Date2String(new Date(System.currentTimeMillis()));\n        travelDate = StringUtils.Date2String(new Date(123456789));\n        trainNumber = \"G1235\";\n        coachNumber = 5;\n        seatClass = SeatClass.FIRSTCLASS.getCode();\n        seatNumber = \"5A\";\n        from = \"shanghai\";\n        to = \"taiyuan\";\n        status = OrderStatus.PAID.getCode();\n        price = \"0.0\";\n        differenceMoney =\"0.0\";\n    }\n\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Order other = (Order) obj;\n        return getBoughtDate().equals(other.getBoughtDate())\n                && getBoughtDate().equals(other.getTravelDate())\n                && getTravelTime().equals(other.getTravelTime())\n                && accountId .equals( other.getAccountId() )\n                && contactsName.equals(other.getContactsName())\n                && contactsDocumentNumber.equals(other.getContactsDocumentNumber())\n                && documentType == other.getDocumentType()\n                && trainNumber.equals(other.getTrainNumber())\n                && coachNumber == other.getCoachNumber())\n                && seatClass == other.getSeatClass()\n                && seatNumber .equals(other.getSeatNumber())\n                && from.equals(other.getFrom())\n                && to.equals(other.getTo())\n                && status == other.getStatus()\n                && price.equals(other.price);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + (id == null ? 0 : id.hashCode());\n        return result;\n    }\n\n}>"
    },
    "other.service.OrderOtherServiceImpl.queryOrdersForRefresh":{
        "class_name": "OrderInfo",
        "input": "OrderInfo {\n\n    /**\n     * account id\n     */\n    private String loginId;\n\n    private String travelDateStart;\n\n    private String travelDateEnd;\n\n    private String boughtDateStart;\n\n    private String boughtDateEnd;\n\n    private int state;\n\n    private boolean enableTravelDateQuery;\n\n    private boolean enableBoughtDateQuery;\n\n    private boolean enableStateQuery;\n\n    public OrderInfo(){\n        //Default Constructor\n    }\n\n    public String getLoginId() {\n        return loginId;\n    }\n\n    public void setLoginId(String loginId) {\n        this.loginId = loginId;\n    }\n\n    public int getState() {\n        return state;\n    }\n\n    public void enableTravelDateQuery(String startTime, String endTime){\n        enableTravelDateQuery = true;\n        travelDateStart = startTime;\n        travelDateEnd = endTime;\n    }\n\n    public void disableTravelDateQuery(){\n        enableTravelDateQuery = false;\n        travelDateStart = null;\n        travelDateEnd = null;\n    }\n\n    public void enableBoughtDateQuery(String startTime, String endTime){\n        enableBoughtDateQuery = true;\n        boughtDateStart = startTime;\n        boughtDateEnd = endTime;\n    }\n\n    public void disableBoughtDateQuery(){\n        enableBoughtDateQuery = false;\n        boughtDateStart = null;\n        boughtDateEnd = null;\n    }\n\n    public void enableStateQuery(int targetStatus){\n        enableStateQuery = true;\n        state = targetStatus;\n    }\n\n    public void disableStateQuery(){\n        enableTravelDateQuery = false;\n        state = -1;\n    }\n\n    public boolean isEnableTravelDateQuery() {\n        return enableTravelDateQuery;\n    }\n\n    public boolean isEnableBoughtDateQuery() {\n        return enableBoughtDateQuery;\n    }\n\n    public boolean isEnableStateQuery() {\n        return enableStateQuery;\n    }\n}, authorization",
        "output": "ArrayList<Order{\n\n    private String id;\n\n    private String boughtDate;\n\n    private String travelDate;\n\n    private String travelTime;\n\n    /**\n     * Which Account Bought it\n     */\n    private String accountId;\n\n    /**\n     * Tickets bought for whom....\n     */\n    private String contactsName;\n\n    private int documentType;\n\n    private String contactsDocumentNumber;\n\n    private String trainNumber;\n\n    private int coachNumber;\n\n    private int seatClass;\n\n    private String seatNumber;\n\n    private String from;\n\n    private String to;\n\n    private int status;\n\n    private String price;\n\n    private String differenceMoney;\n\n    public Order(){\n        boughtDate = StringUtils.Date2String(new Date(System.currentTimeMillis()));\n        travelDate = StringUtils.Date2String(new Date(123456789));\n        trainNumber = \"G1235\";\n        coachNumber = 5;\n        seatClass = SeatClass.FIRSTCLASS.getCode();\n        seatNumber = \"5A\";\n        from = \"shanghai\";\n        to = \"taiyuan\";\n        status = OrderStatus.PAID.getCode();\n        price = \"0.0\";\n        differenceMoney =\"0.0\";\n    }\n\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Order other = (Order) obj;\n        return getBoughtDate().equals(other.getBoughtDate())\n                && getBoughtDate().equals(other.getTravelDate())\n                && getTravelTime().equals(other.getTravelTime())\n                && accountId .equals( other.getAccountId() )\n                && contactsName.equals(other.getContactsName())\n                && contactsDocumentNumber.equals(other.getContactsDocumentNumber())\n                && documentType == other.getDocumentType()\n                && trainNumber.equals(other.getTrainNumber())\n                && coachNumber == other.getCoachNumber())\n                && seatClass == other.getSeatClass()\n                && seatNumber .equals(other.getSeatNumber())\n                && from.equals(other.getFrom())\n                && to.equals(other.getTo())\n                && status == other.getStatus()\n                && price.equals(other.price);\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + (id == null ? 0 : id.hashCode());\n        return result;\n    }\n\n}>"
    },
    "inside_payment.service.InsidePaymentServiceImpl.pay":{
        "class_name": "PaymentInfo",
        "input": "PaymentInfo {\n    public PaymentInfo(){\n        // Default Constructor\n    }\n\n    private String userId;\n    private String orderId;\n    private String tripId;\n    private String price;\n\n}",
        "output": "Response<>(1, Payment Success, null)"
    },
    "travel2.service.TravelServiceImpl.queryByBatch":{
        "class_name": "TripInfo",
        "input": "TripInfo {\n    @Valid\n    @NotNull\n    private String startPlace;\n\n    @Valid\n    @NotNull\n    private String endPlace;\n\n    @Valid\n    @NotNull\n    private String departureTime;\n\n    public TripInfo(){\n        // Default Constructor\n        this.startPlace = \"\";\n        this.endPlace = \"\";\n        this.departureTime = \"\";\n    }\n\n    public String getStartPlace() {\n        return StringUtils.String2Lower(this.startPlace);\n    }\n\n    public String getEndPlace() {\n        return StringUtils.String2Lower(this.endPlace);\n    }\n\n}, authorization",
        "output": "List<TripInfo{\n    private String id;\n\n    private TripId tripId;\n\n    private String trainTypeName;\n\n    private String routeId;\n    private String startStationName;\n\n    private String stationsName;\n\n    private String terminalStationName;\n\n    private String startTime;\n\n    private String endTime;\n\n    public Trip(edu.fudan.common.entity.TripId tripId, String trainTypeName, String startStationName, String stationsName, String terminalStationName, String startTime, String endTime) {\n        this.tripId = tripId;\n        this.trainTypeName = trainTypeName;\n        this.startStationName = StringUtils.String2Lower(startStationName);\n        this.stationsName = StringUtils.String2Lower(stationsName);\n        this.terminalStationName = StringUtils.String2Lower(terminalStationName);\n        this.startTime = startTime;\n        this.endTime = endTime;\n    }\n\n    public Trip(TripId tripId, String trainTypeName, String routeId) {\n        this.tripId = tripId;\n        this.trainTypeName = trainTypeName;\n        this.routeId = routeId;\n        this.startStationName = \"\";\n        this.terminalStationName = \"\";\n        this.startTime = \"\";\n        this.endTime = \"\";\n    }\n\n    public Trip(){\n        // Default Constructor\n        this.trainTypeName = \"\";\n        this.startStationName = \"\";\n        this.terminalStationName = \"\";\n        this.startTime = \"\";\n        this.endTime = \"\";\n    }\n\n}"
    },
    "travel.service.TravelServiceImpl.queryByBatch":{
        "class_name": "TripInfo",
        "input": "TripInfo {\n    @Valid\n    @NotNull\n    private String startPlace;\n\n    @Valid\n    @NotNull\n    private String endPlace;\n\n    @Valid\n    @NotNull\n    private String departureTime;\n\n    public TripInfo(){\n        // Default Constructor\n        this.startPlace = \"\";\n        this.endPlace = \"\";\n        this.departureTime = \"\";\n    }\n\n    public String getStartPlace() {\n        return StringUtils.String2Lower(this.startPlace);\n    }\n\n    public String getEndPlace() {\n        return StringUtils.String2Lower(this.endPlace);\n    }\n\n}, authorization",
        "output": "List<Trip {\n    private String id;\n\n    private TripId tripId;\n\n    private String trainTypeName;\n\n    private String routeId;\n    private String startStationName;\n\n    private String stationsName;\n\n    private String terminalStationName;\n\n    private String startTime;\n\n    private String endTime;\n\n    public Trip(edu.fudan.common.entity.TripId tripId, String trainTypeName, String startStationName, String stationsName, String terminalStationName, String startTime, String endTime) {\n        this.tripId = tripId;\n        this.trainTypeName = trainTypeName;\n        this.startStationName = StringUtils.String2Lower(startStationName);\n        this.stationsName = StringUtils.String2Lower(stationsName);\n        this.terminalStationName = StringUtils.String2Lower(terminalStationName);\n        this.startTime = startTime;\n        this.endTime = endTime;\n    }\n\n    public Trip(TripId tripId, String trainTypeName, String routeId) {\n        this.tripId = tripId;\n        this.trainTypeName = trainTypeName;\n        this.routeId = routeId;\n        this.startStationName = \"\";\n        this.terminalStationName = \"\";\n        this.startTime = \"\";\n        this.endTime = \"\";\n    }\n\n    public Trip(){\n        // Default Constructor\n        this.trainTypeName = \"\";\n        this.startStationName = \"\";\n        this.terminalStationName = \"\";\n        this.startTime = \"\";\n        this.endTime = \"\";\n    }\n\n}"
    },
    "rebook.service.RebookServiceImpl.rebook":{
        "class_name": "RebookInfo",
        "input": "RebookInfo {\n\n    @Valid\n    @NotNull\n    private String loginId;\n\n    @Valid\n    @NotNull\n    private String orderId;\n\n    @Valid\n    @NotNull\n    private String oldTripId;\n\n    @Valid\n    @NotNull\n    private String tripId;\n\n    @Valid\n    @NotNull\n    private int seatType;\n\n    @Valid\n    @NotNull\n    private String date;\n\n    public RebookInfo(){\n        // Default Constructor\n        this.loginId = \"\";\n        this.orderId = \"\";\n        this.oldTripId = \"\";\n        this.tripId = \"\";\n        this.seatType = 0;\n        this.date = StringUtils.Date2String(new Date());\n    }\n\n}, authorization",
        "output": " Response<>(statues, Success, OrderUpdateDto {\n\n    private Order order;\n\n    private RebookInfo rebookInfo;\n\n    private TripAllDetail tripAllDetail;\n\n    private String ticketPrice;\n\n    private String orderMoneyDifference;\n\n})"
    },
    "consign.service.ConsignServiceImpl.updateConsignRecord":{
        "class_name": "Consign",
        "input": "Consign {\n    @Id\n    @GeneratedValue(generator = \"jpa-uuid\")\n    @Column(length = 36)\n    private String id;        //id主键改成String类型的 自定义生成策略\n    private String orderId;   //这次托运关联订单\n    private String accountId;  //这次托运关联的账户\n\n    private String handleDate;\n    private String targetDate;\n    private String from;\n    private String to;\n    private String consignee;\n    private String phone;\n    private double weight;\n    private boolean isWithin;\n\n}, authorization",
        "output": "Response<>(1, Update consign success, ConsignRecord {\n\n    @Id\n    @Column(name = \"consign_record_id\")\n    private String id;\n    private String orderId;\n    @Column(name = \"user_id\")\n    private String accountId;\n    private String handleDate;\n    private String targetDate;\n    @Column(name = \"from_place\")\n    private String from;\n    @Column(name = \"to_place\")\n    private String to;\n    private String consignee;\n    @Column(name = \"consign_record_phone\")\n    private String phone;\n    private double weight;\n    @Column(name = \"consign_record_price\")\n    private double price;\n\n)"
    },
    "contacts.service.ContactsServiceImpl.create":{
        "class_name": "Contacts",
        "input": ["Contacts","Contacts {\n\n    @Id\n    @GeneratedValue(generator = \"jpa-uuid\")\n    @Column(length = 36)\n    private String id;\n    @Column(name = \"account_id\")\n    private String accountId;\n\n    private String name;\n    @Column(name = \"document_type\")\n    private int documentType;\n    @Column(name = \"document_number\")\n    private String documentNumber;\n    @Column(name = \"phone_number\")\n    private String phoneNumber;\n\n    public Contacts() {\n        //Default Constructor\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Contacts other = (Contacts) obj;\n        return name.equals(other.getName())\n                && accountId.equals(other.getAccountId())\n                && documentNumber.equals(other.getDocumentNumber())\n                && phoneNumber.equals(other.getPhoneNumber())\n                && documentType == other.getDocumentType();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + (id == null ? 0 : id.hashCode());\n        return result;\n    }\n}"],
        "output": ["Contacts","public class Contacts {\n\n    @Id\n    @GeneratedValue(generator = \"jpa-uuid\")\n    @Column(length = 36)\n    private String id;\n    @Column(name = \"account_id\")\n    private String accountId;\n\n    private String name;\n    @Column(name = \"document_type\")\n    private int documentType;\n    @Column(name = \"document_number\")\n    private String documentNumber;\n    @Column(name = \"phone_number\")\n    private String phoneNumber;\n\n    public Contacts() {\n        //Default Constructor\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null) {\n            return false;\n        }\n        if (getClass() != obj.getClass()) {\n            return false;\n        }\n        Contacts other = (Contacts) obj;\n        return name.equals(other.getName())\n                && accountId.equals(other.getAccountId())\n                && documentNumber.equals(other.getDocumentNumber())\n                && phoneNumber.equals(other.getPhoneNumber())\n                && documentType == other.getDocumentType();\n    }\n\n    @Override\n    public int hashCode() {\n        int result = 17;\n        result = 31 * result + (id == null ? 0 : id.hashCode());\n        return result;\n    }\n}"]
    }
}
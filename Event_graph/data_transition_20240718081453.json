{
    "order.service.OrderServiceImpl.queryOrdersForRefresh > consign.service.ConsignServiceImpl.queryByOrderId": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if 'id' in instance_A matches 'orderId' in instance_B\\n    if 'id' not in instance_A:\\n        raise ValueError(\\\"Instance of A does not have 'id' attribute.\\\")\\n    if 'orderId' not in instance_B:\\n        raise ValueError(\\\"Instance of B does not have 'orderId' attribute.\\\")\\n    \\n    if instance_A['id'] == instance_B['orderId']:\\n        return True\\n    else:\\n        raise ValueError(f\\\"Order ID mismatch: {instance_A['id']} (A) != {instance_B['orderId']} (B)\\\")\\n\\n# Example usage:\\n# instance_A = {'id': '8d51a068-0500-4199-be83-1c21763bb2e4', ...}\\n# instance_B = {'orderId': '8d51a068-0500-4199-be83-1c21763bb2e4', ...}\\n# is_related(instance_A, instance_B)  # Should return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > travel2.service.TravelServiceImpl.queryByBatch": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    \\\"\\\"\\\"\\n    Determine if instances of TokenDto (instance_A) and TripInfo (instance_B) are related to each other using their attributes.\\n    \\n    :param instance_A: dict representing an instance of TokenDto\\n    :param instance_B: dict representing an instance of TripInfo\\n    :return: True if all checks passed, otherwise raise Error on the specific violation with a detailed message.\\n    \\\"\\\"\\\"\\n    # Extract relevant attributes\\n    token_A = instance_A.get('token')\\n    authorization_B = instance_B.get('authorization')\\n    \\n    # Check if the token in TokenDto matches the authorization in TripInfo\\n    if token_A != authorization_B:\\n        raise ValueError(f\\\"TokenDto token '{token_A}' does not match TripInfo authorization '{authorization_B}'\\\")\\n    \\n    return True\\n\"",
    "contacts.service.ContactsServiceImpl.findContactsByAccountId > preserveOther.service.PreserveOtherServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if accountId in both instances match\\n    if instance_A.get('accountId') != instance_B.get('accountId'):\\n        raise ValueError(f\\\"accountId mismatch: {instance_A.get('accountId')} != {instance_B.get('accountId')}\\\")\\n    \\n    # Check if id in instance_A matches contactsId in instance_B\\n    if instance_A.get('id') != instance_B.get('contactsId'):\\n        raise ValueError(f\\\"id and contactsId mismatch: {instance_A.get('id')} != {instance_B.get('contactsId')}\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > order.service.OrderServiceImpl.queryOrdersForRefresh": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    \\\"\\\"\\\"\\n    Determine if instances of TokenDto (instance_A) and OrderInfo (instance_B) are related.\\n    \\n    Args:\\n    - instance_A (dict): An instance of TokenDto.\\n    - instance_B (dict): An instance of OrderInfo.\\n    \\n    Returns:\\n    - bool: True if related, otherwise raises an error.\\n    \\\"\\\"\\\"\\n    # Extract relevant attributes\\n    userId = instance_A.get('userId')\\n    loginId = instance_B.get('loginId')\\n    \\n    # Check if userId and loginId are the same\\n    if userId == loginId:\\n        return True\\n    else:\\n        raise ValueError(f\\\"Relation check failed: userId ({userId}) does not match loginId ({loginId})\\\")\\n\\n# Example usage:\\n# instance_A = {'userId': '4d2a46c7-71cb-4cf1-b5bb-b68406d9da6f', 'username': 'fdse_microservice', 'authorization': '...'}\\n# instance_B = {'loginId': '4d2a46c7-71cb-4cf1-b5bb-b68406d9da6f', 'travelDateStart': None, 'travelDateEnd': None, ...}\\n# print(is_related(instance_A, instance_B))  # Should return True\\n\"",
    "order.service.OrderServiceImpl.queryOrdersForRefresh > inside_payment.service.InsidePaymentServiceImpl.pay": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if orderId in PaymentInfo matches id in Order\\n    if instance_B.get('orderId') != instance_A.get('id'):\\n        raise ValueError(f\\\"orderId in PaymentInfo ({instance_B.get('orderId')}) does not match id in Order ({instance_A.get('id')})\\\")\\n    \\n    # Check if price in PaymentInfo matches price in Order\\n    if instance_B.get('price') != instance_A.get('price'):\\n        raise ValueError(f\\\"price in PaymentInfo ({instance_B.get('price')}) does not match price in Order ({instance_A.get('price')})\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > other.service.OrderOtherServiceImpl.queryOrdersForRefresh": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if userId in TokenDto matches loginId in OrderInfo\\n    if instance_A.get('userId') != instance_B.get('loginId'):\\n        raise ValueError(f\\\"userId in TokenDto ({instance_A.get('userId')}) does not match loginId in OrderInfo ({instance_B.get('loginId')})\\\")\\n    \\n    return True\\n\"",
    "inside_payment.service.InsidePaymentServiceImpl.pay > order.service.OrderServiceImpl.queryOrdersForRefresh": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if 'authorization' attribute exists in both instances\\n    if 'authorization' not in instance_A:\\n        raise ValueError(\\\"Instance A does not have 'authorization' attribute.\\\")\\n    if 'authorization' not in instance_B:\\n        raise ValueError(\\\"Instance B does not have 'authorization' attribute.\\\")\\n    \\n    # Check if the 'authorization' attributes match\\n    if instance_A['authorization'] != instance_B['authorization']:\\n        raise ValueError(\\\"Authorization tokens do not match between instance A and instance B.\\\")\\n    \\n    return True\\n\"",
    "travel.service.TravelServiceImpl.queryByBatch > rebook.service.RebookServiceImpl.rebook": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    \\\"\\\"\\\"\\n    Determine if instances of TripResponse (A) and RebookInfo (B) are related based on their attributes.\\n    \\n    Args:\\n    instance_A (dict): An instance of TripResponse.\\n    instance_B (dict): An instance of RebookInfo.\\n    \\n    Returns:\\n    bool: True if instances are related, otherwise raises an error.\\n    \\\"\\\"\\\"\\n    # Check if tripId in both instances match\\n    if 'tripId' in instance_A and 'tripId' in instance_B:\\n        if instance_A['tripId'] == instance_B['tripId']:\\n            return True\\n        else:\\n            raise ValueError(f\\\"Trip ID mismatch: {instance_A['tripId']} != {instance_B['tripId']}\\\")\\n    else:\\n        raise KeyError(\\\"Missing 'tripId' in one of the instances\\\")\\n\\n# Example usage:\\n# instance_A = {'tripId': 'D1345', 'trainTypeName': 'DongCheOne', ...}\\n# instance_B = {'loginId': '', 'orderId': 'b42e1b7b-2557-48d8-89f2-5bf4162c1b00', 'oldTripId': 'D1345', 'tripId': 'D1345', ...}\\n# print(is_related(instance_A, instance_B))  # Should return True if tripId matches\\n\"",
    "contacts.service.ContactsServiceImpl.findContactsByAccountId > preserve.service.PreserveServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if accountId in A matches accountId in B\\n    if instance_A.get('accountId') != instance_B.get('accountId'):\\n        raise ValueError(f\\\"accountId mismatch: {instance_A.get('accountId')} != {instance_B.get('accountId')}\\\")\\n    \\n    # Check if id in A matches contactsId in B\\n    if instance_A.get('id') != instance_B.get('contactsId'):\\n        raise ValueError(f\\\"id mismatch: {instance_A.get('id')} != {instance_B.get('contactsId')}\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > rebook.service.RebookServiceImpl.rebook": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if the authorization tokens match\\n    if 'authorization' in instance_A and 'authorization' in instance_B:\\n        if instance_A['authorization'] != instance_B['authorization']:\\n            raise ValueError(f\\\"Authorization tokens do not match: {instance_A['authorization']} != {instance_B['authorization']}\\\")\\n    \\n    # Optionally check if userId matches loginId if loginId is not empty\\n    if 'userId' in instance_A and 'loginId' in instance_B:\\n        if instance_B['loginId'] and instance_A['userId'] != instance_B['loginId']:\\n            raise ValueError(f\\\"userId and loginId do not match: {instance_A['userId']} != {instance_B['loginId']}\\\")\\n    \\n    return True\\n\"",
    "travel2.service.TravelServiceImpl.queryByBatch > preserveOther.service.PreserveOtherServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if tripId matches\\n    if instance_A.get('tripId') != instance_B.get('tripId'):\\n        raise ValueError(f\\\"Trip ID mismatch: {instance_A.get('tripId')} != {instance_B.get('tripId')}\\\")\\n    \\n    # Check if startStation matches 'from'\\n    if instance_A.get('startStation') != instance_B.get('from'):\\n        raise ValueError(f\\\"Start station mismatch: {instance_A.get('startStation')} != {instance_B.get('from')}\\\")\\n    \\n    # Check if terminalStation matches 'to'\\n    if instance_A.get('terminalStation') != instance_B.get('to'):\\n        raise ValueError(f\\\"Terminal station mismatch: {instance_A.get('terminalStation')} != {instance_B.get('to')}\\\")\\n    \\n    return True\\n\"",
    "inside_payment.service.InsidePaymentServiceImpl.pay > other.service.OrderOtherServiceImpl.queryOrdersForRefresh": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if 'authorization' attribute exists in both instances\\n    if 'authorization' not in instance_A:\\n        raise ValueError(\\\"Instance A does not have 'authorization' attribute.\\\")\\n    if 'authorization' not in instance_B:\\n        raise ValueError(\\\"Instance B does not have 'authorization' attribute.\\\")\\n    \\n    # Check if the 'authorization' values match\\n    if instance_A['authorization'] == instance_B['authorization']:\\n        return True\\n    else:\\n        raise ValueError(f\\\"Authorization mismatch: {instance_A['authorization']} != {instance_B['authorization']}\\\")\\n\\n# Example usage:\\n# instance_A = {'authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9...'}\\n# instance_B = {'authorization': 'Bearer eyJhbGciOiJIUzI1NiJ9...', 'other_attributes': '...'}\\n# print(is_related(instance_A, instance_B))  # Should return True or raise an error\\n\"",
    "order.service.OrderServiceImpl.queryOrdersForRefresh > consign.service.ConsignServiceImpl.updateConsignRecord": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if orderId in Consign matches id in Order\\n    if instance_B.get('orderId') != instance_A.get('id'):\\n        raise ValueError(f\\\"Order ID mismatch: {instance_B.get('orderId')} != {instance_A.get('id')}\\\")\\n    \\n    # Check if accountId matches\\n    if instance_B.get('accountId') != instance_A.get('accountId'):\\n        raise ValueError(f\\\"Account ID mismatch: {instance_B.get('accountId')} != {instance_A.get('accountId')}\\\")\\n    \\n    # Check if 'from' location matches\\n    if instance_B.get('from') != instance_A.get('from'):\\n        raise ValueError(f\\\"From location mismatch: {instance_B.get('from')} != {instance_A.get('from')}\\\")\\n    \\n    # Check if 'to' location matches\\n    if instance_B.get('to') != instance_A.get('to'):\\n        raise ValueError(f\\\"To location mismatch: {instance_B.get('to')} != {instance_A.get('to')}\\\")\\n    \\n    return True\\n\"",
    "travel.service.TravelServiceImpl.queryByBatch > preserve.service.PreserveServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if tripId in B matches tripId in A\\n    if instance_B.get('tripId') != instance_A.get('tripId'):\\n        raise ValueError(f\\\"tripId mismatch: {instance_B.get('tripId')} != {instance_A.get('tripId')}\\\")\\n    \\n    # Check if from in B matches startStation in A\\n    if instance_B.get('from') != instance_A.get('startStation'):\\n        raise ValueError(f\\\"from (startStation) mismatch: {instance_B.get('from')} != {instance_A.get('startStation')}\\\")\\n    \\n    # Check if to in B matches terminalStation in A\\n    if instance_B.get('to') != instance_A.get('terminalStation'):\\n        raise ValueError(f\\\"to (terminalStation) mismatch: {instance_B.get('to')} != {instance_A.get('terminalStation')}\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > preserve.service.PreserveServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if userId in instance_A matches accountId in instance_B\\n    if instance_A.get('userId') != instance_B.get('accountId'):\\n        raise ValueError(f\\\"userId in instance_A ({instance_A.get('userId')}) does not match accountId in instance_B ({instance_B.get('accountId')})\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > preserveOther.service.PreserveOtherServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    # Check if userId in instance_A matches accountId in instance_B\\n    if instance_A.get('userId') != instance_B.get('accountId'):\\n        raise ValueError(f\\\"userId in instance_A ({instance_A.get('userId')}) does not match accountId in instance_B ({instance_B.get('accountId')})\\\")\\n    \\n    return True\\n\"",
    "auth.service.impl.TokenServiceImpl.getToken > travel.service.TravelServiceImpl.queryByBatch": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    \\\"\\\"\\\"\\n    Determine if instances of TokenDto (A) and TripInfo (B) are related based on their attributes.\\n    \\n    Args:\\n    instance_A (dict): Instance of TokenDto.\\n    instance_B (dict): Instance of TripInfo.\\n    \\n    Returns:\\n    bool: True if related, otherwise raises an error.\\n    \\\"\\\"\\\"\\n    # Extract relevant attributes\\n    token = instance_A.get('authorization')\\n    authorization = instance_B.get('authorization')\\n    \\n    # Check if the authorization in TripInfo matches the token in TokenDto\\n    if authorization != token:\\n        raise ValueError(f\\\"Authorization token mismatch: TripInfo authorization '{authorization}' does not match TokenDto token '{token}'\\\")\\n    \\n    return True\\n\"",
    "foodsearch.service.FoodServiceImpl.getAllFood > preserve.service.PreserveServiceImpl.preserve": "\"def is_related(instance_A: dict, instance_B: dict) -> bool:\\n    return True\\n\""
}
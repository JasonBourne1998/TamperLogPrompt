{"auth.service.impl.TokenServiceImpl.getToken": "def is_valid(instance: dict) -> bool:\n    return True\n", "preserveOther.service.PreserveOtherServiceImpl.preserve": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Helper functions for validation\n    def is_non_empty_string(value):\n        return isinstance(value, str) and bool(value.strip())\n    \n    def is_valid_date(date_str):\n        try:\n            datetime.strptime(date_str, \"%Y-%m-%d\")\n            return True\n        except ValueError:\n            return False\n    \n    def is_valid_price(price):\n        return isinstance(price, (int, float)) and price >= 0\n    \n    def is_valid_weight(weight):\n        return isinstance(weight, (int, float)) and weight >= 0\n    \n    # Presence Check\n    required_fields = [\n        'accountId', 'contactsId', 'tripId', 'loginToken', 'date', 'from', 'to',\n        'stationName', 'storeName', 'foodName', 'handleDate', 'consigneeName', 'consigneePhone'\n    ]\n    for field in required_fields:\n        if not is_non_empty_string(instance.get(field, '')):\n            raise ValueError(f\"Field {field} is required and cannot be empty.\")\n    \n    # Data Type and Range Checks\n    if not isinstance(instance.get('seatType'), int) or not (0 <= instance['seatType'] <= 3):\n        raise ValueError(\"Field seatType must be an integer between 0 and 3.\")\n    \n    if not isinstance(instance.get('assurance'), int) or not (0 <= instance['assurance'] <= 1):\n        raise ValueError(\"Field assurance must be an integer between 0 and 1.\")\n    \n    if not isinstance(instance.get('foodType'), int) or not (0 <= instance['foodType'] <= 2):\n        raise ValueError(\"Field foodType must be an integer between 0 and 2.\")\n    \n    if not is_valid_date(instance.get('date', '')):\n        raise ValueError(\"Field date must be in the format YYYY-MM-DD.\")\n    \n    if not is_valid_date(instance.get('handleDate', '')):\n        raise ValueError(\"Field handleDate must be in the format YYYY-MM-DD.\")\n    \n    if not is_valid_price(instance.get('foodPrice', -1)):\n        raise ValueError(\"Field foodPrice must be a non-negative number.\")\n    \n    if not is_valid_weight(instance.get('consigneeWeight', -1)):\n        raise ValueError(\"Field consigneeWeight must be a non-negative number.\")\n    \n    if not isinstance(instance.get('isWithin'), bool):\n        raise ValueError(\"Field isWithin must be a boolean.\")\n    \n    # If all checks pass\n    return True\n", "preserve.service.PreserveServiceImpl.preserve": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Data Type Check\n    if instance.get('accountId') is not None and not isinstance(instance.get('accountId'), str):\n        raise ValueError(\"accountId must be a string\")\n    if instance.get('contactsId') is not None and not isinstance(instance.get('contactsId'), str):\n        raise ValueError(\"contactsId must be a string\")\n    if instance.get('tripId') is not None and not isinstance(instance.get('tripId'), str):\n        raise ValueError(\"tripId must be a string\")\n    if instance.get('seatType') is not None and not isinstance(instance.get('seatType'), int):\n        raise ValueError(\"seatType must be an integer\")\n    if instance.get('loginToken') is not None and not isinstance(instance.get('loginToken'), str):\n        raise ValueError(\"loginToken must be a string\")\n    if instance.get('date') is not None and not isinstance(instance.get('date'), str):\n        raise ValueError(\"date must be a string\")\n    if instance.get('from') is not None and not isinstance(instance.get('from'), str):\n        raise ValueError(\"from must be a string\")\n    if instance.get('to') is not None and not isinstance(instance.get('to'), str):\n        raise ValueError(\"to must be a string\")\n    if instance.get('assurance') is not None and not isinstance(instance.get('assurance'), int):\n        raise ValueError(\"assurance must be an integer\")\n    if instance.get('foodType') is not None and not isinstance(instance.get('foodType'), int):\n        raise ValueError(\"foodType must be an integer\")\n    if instance.get('stationName') is not None and not isinstance(instance.get('stationName'), str):\n        raise ValueError(\"stationName must be a string\")\n    if instance.get('storeName') is not None and not isinstance(instance.get('storeName'), str):\n        raise ValueError(\"storeName must be a string\")\n    if instance.get('foodName') is not None and not isinstance(instance.get('foodName'), str):\n        raise ValueError(\"foodName must be a string\")\n    if instance.get('foodPrice') is not None and not isinstance(instance.get('foodPrice'), float):\n        raise ValueError(\"foodPrice must be a float\")\n    if instance.get('handleDate') is not None and not isinstance(instance.get('handleDate'), str):\n        raise ValueError(\"handleDate must be a string\")\n    if instance.get('consigneeName') is not None and not isinstance(instance.get('consigneeName'), str):\n        raise ValueError(\"consigneeName must be a string\")\n    if instance.get('consigneePhone') is not None and not isinstance(instance.get('consigneePhone'), str):\n        raise ValueError(\"consigneePhone must be a string\")\n    if instance.get('consigneeWeight') is not None and not isinstance(instance.get('consigneeWeight'), float):\n        raise ValueError(\"consigneeWeight must be a float\")\n    if instance.get('isWithin') is not None and not isinstance(instance.get('isWithin'), bool):\n        raise ValueError(\"isWithin must be a boolean\")\n\n    # Format Check\n    date_format = \"%Y-%m-%d\"\n    datetime_format = \"%Y-%m-%d %H:%M:%S\"\n    phone_pattern = re.compile(r\"^\\+?\\d{10,15}$\")\n    \n    if instance.get('date') is not None:\n        try:\n            datetime.strptime(instance.get('date'), date_format)\n        except ValueError:\n            raise ValueError(\"date must be in YYYY-MM-DD format\")\n    \n    if instance.get('handleDate') is not None:\n        try:\n            datetime.strptime(instance.get('handleDate'), datetime_format)\n        except ValueError:\n            raise ValueError(\"handleDate must be in YYYY-MM-DD HH:MM:SS format\")\n    \n    if instance.get('consigneePhone') is not None and not phone_pattern.match(instance.get('consigneePhone')):\n        raise ValueError(\"consigneePhone must be a valid phone number\")\n\n    # Range Check\n    if instance.get('seatType') is not None and not (0 <= instance.get('seatType') <= 3):\n        raise ValueError(\"seatType must be between 0 and 3\")\n    if instance.get('assurance') is not None and not (0 <= instance.get('assurance') <= 1):\n        raise ValueError(\"assurance must be 0 or 1\")\n    if instance.get('foodType') is not None and not (0 <= instance.get('foodType') <= 2):\n        raise ValueError(\"foodType must be between 0 and 2\")\n    if instance.get('foodPrice') is not None and not (0.0 <= instance.get('foodPrice') <= 1000.0):\n        raise ValueError(\"foodPrice must be between 0.0 and 1000.0\")\n    if instance.get('consigneeWeight') is not None and not (0.0 <= instance.get('consigneeWeight') <= 100.0):\n        raise ValueError(\"consigneeWeight must be between 0.0 and 100.0\")\n\n    # Presence Check\n    required_fields = ['accountId', 'contactsId', 'tripId', 'seatType', 'loginToken', 'date', 'from', 'to', 'assurance', 'stationName', 'storeName', 'foodName', 'foodPrice', 'handleDate', 'consigneeName', 'consigneePhone', 'consigneeWeight', 'isWithin']\n    for field in required_fields:\n        if instance.get(field) is None:\n            raise ValueError(f\"{field} must not be empty\")\n\n    # Consistency Check\n    if instance.get('from') is not None and instance.get('to') is not None and instance.get('from') == instance.get('to'):\n        raise ValueError(\"from and to locations must be different\")\n\n    return True\n", "order.service.OrderServiceImpl.queryOrdersForRefresh": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Data Type Check\n    if not isinstance(instance.get('state'), int):\n        raise ValueError(\"state must be an integer.\")\n    \n    if not isinstance(instance.get('enableTravelDateQuery'), bool):\n        raise ValueError(\"enableTravelDateQuery must be a boolean.\")\n    \n    if not isinstance(instance.get('enableBoughtDateQuery'), bool):\n        raise ValueError(\"enableBoughtDateQuery must be a boolean.\")\n    \n    if not isinstance(instance.get('enableStateQuery'), bool):\n        raise ValueError(\"enableStateQuery must be a boolean.\")\n    \n    # Format Check for dates\n    date_format = \"%Y-%m-%d\"\n    date_fields = ['travelDateStart', 'travelDateEnd', 'boughtDateStart', 'boughtDateEnd']\n    \n    for field in date_fields:\n        date_str = instance.get(field)\n        if date_str:\n            try:\n                datetime.strptime(date_str, date_format)\n            except ValueError:\n                raise ValueError(f\"{field} must be in YYYY-MM-DD format.\")\n    \n    # Range Check\n    if instance.get('state') < 0:\n        raise ValueError(\"state must be a non-negative integer.\")\n    \n    # Consistency Check\n    if instance.get('enableTravelDateQuery'):\n        travel_start = instance.get('travelDateStart')\n        travel_end = instance.get('travelDateEnd')\n        if travel_start and travel_end:\n            if travel_start > travel_end:\n                raise ValueError(\"travelDateStart must be before travelDateEnd.\")\n    \n    if instance.get('enableBoughtDateQuery'):\n        bought_start = instance.get('boughtDateStart')\n        bought_end = instance.get('boughtDateEnd')\n        if bought_start and bought_end:\n            if bought_start > bought_end:\n                raise ValueError(\"boughtDateStart must be before boughtDateEnd.\")\n    \n    return True\n", "other.service.OrderOtherServiceImpl.queryOrdersForRefresh": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Data Type Check\n    if not isinstance(instance.get('loginId'), str):\n        raise ValueError(\"loginId must be a string\")\n    \n    if not isinstance(instance.get('travelDateStart'), (str, type(None))):\n        raise ValueError(\"travelDateStart must be a string or None\")\n    \n    if not isinstance(instance.get('travelDateEnd'), (str, type(None))):\n        raise ValueError(\"travelDateEnd must be a string or None\")\n    \n    if not isinstance(instance.get('boughtDateStart'), (str, type(None))):\n        raise ValueError(\"boughtDateStart must be a string or None\")\n    \n    if not isinstance(instance.get('boughtDateEnd'), (str, type(None))):\n        raise ValueError(\"boughtDateEnd must be a string or None\")\n    \n    if not isinstance(instance.get('state'), int):\n        raise ValueError(\"state must be an integer\")\n    \n    if not isinstance(instance.get('enableTravelDateQuery'), bool):\n        raise ValueError(\"enableTravelDateQuery must be a boolean\")\n    \n    if not isinstance(instance.get('enableBoughtDateQuery'), bool):\n        raise ValueError(\"enableBoughtDateQuery must be a boolean\")\n    \n    if not isinstance(instance.get('enableStateQuery'), bool):\n        raise ValueError(\"enableStateQuery must be a boolean\")\n    \n    # Presence Check\n    if not instance.get('loginId'):\n        raise ValueError(\"loginId must not be blank\")\n    \n    # Format Check\n    uuid_regex = re.compile(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n    if not uuid_regex.match(instance['loginId']):\n        raise ValueError(\"loginId must be a valid UUID\")\n    \n    date_format = \"%Y-%m-%d\"\n    for date_field in ['travelDateStart', 'travelDateEnd', 'boughtDateStart', 'boughtDateEnd']:\n        date_value = instance.get(date_field)\n        if date_value:\n            try:\n                datetime.strptime(date_value, date_format)\n            except ValueError:\n                raise ValueError(f\"{date_field} must be in YYYY-MM-DD format\")\n    \n    # Range Check\n    if not (0 <= instance['state'] <= 10):\n        raise ValueError(\"state must be between 0 and 10\")\n    \n    # Consistency Check\n    if instance.get('travelDateStart') and instance.get('travelDateEnd'):\n        if instance['travelDateStart'] > instance['travelDateEnd']:\n            raise ValueError(\"travelDateStart must be before travelDateEnd\")\n    \n    if instance.get('boughtDateStart') and instance.get('boughtDateEnd'):\n        if instance['boughtDateStart'] > instance['boughtDateEnd']:\n            raise ValueError(\"boughtDateStart must be before boughtDateEnd\")\n    \n    return True\n", "inside_payment.service.InsidePaymentServiceImpl.pay": "def is_valid(instance: dict) -> bool:\n    # Check presence of all fields\n    required_fields = ['userId', 'orderId', 'tripId', 'price']\n    for field in required_fields:\n        if field not in instance:\n            raise ValueError(f\"Presence Check Failed: {field} is missing.\")\n    \n    # Check if price is a valid float and non-negative\n    try:\n        price = float(instance['price'])\n        if price < 0:\n            raise ValueError(\"Range Check Failed: price cannot be negative.\")\n    except ValueError:\n        raise ValueError(\"Data Type Check Failed: price is not a valid float.\")\n    \n    return True\n", "travel2.service.TravelServiceImpl.queryByBatch": "def is_valid(instance: dict) -> bool:\n    return True\n", "travel.service.TravelServiceImpl.queryByBatch": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Check presence and data type\n    required_fields = ['startPlace', 'endPlace', 'departureTime']\n    for field in required_fields:\n        if field not in instance or not isinstance(instance[field], str):\n            raise ValueError(f\"{field} is required and must be a string.\")\n    \n    # Check format for departureTime (ISO 8601 format)\n    try:\n        datetime.fromisoformat(instance['departureTime'])\n    except ValueError:\n        raise ValueError(\"departureTime must be in a valid ISO 8601 format.\")\n    \n    return True\n", "rebook.service.RebookServiceImpl.rebook": "import re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Define regex patterns\n    uuid_pattern = re.compile(r'^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n    date_pattern = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    \n    # Presence Check\n    required_fields = ['loginId', 'orderId', 'oldTripId', 'tripId', 'seatType', 'date']\n    for field in required_fields:\n        if field not in instance or instance[field] is None:\n            raise ValueError(f\"Field '{field}' is missing or None.\")\n    \n    # Data Type Check and Format Check\n    if not isinstance(instance['loginId'], str) or not instance['loginId']:\n        raise ValueError(\"Field 'loginId' must be a non-empty string.\")\n    \n    if not isinstance(instance['orderId'], str) or not instance['orderId']:\n        raise ValueError(\"Field 'orderId' must be a non-empty string.\")\n    \n    if not isinstance(instance['oldTripId'], str) or not instance['oldTripId']:\n        raise ValueError(\"Field 'oldTripId' must be a non-empty string.\")\n    \n    if not isinstance(instance['tripId'], str) or not instance['tripId']:\n        raise ValueError(\"Field 'tripId' must be a non-empty string.\")\n    \n    if not isinstance(instance['seatType'], int):\n        raise ValueError(\"Field 'seatType' must be an integer.\")\n    \n    if not isinstance(instance['date'], str) or not date_pattern.match(instance['date']):\n        raise ValueError(\"Field 'date' must be a valid date string in the format 'YYYY-MM-DD'.\")\n    \n    # Range Check\n    if not (0 <= instance['seatType'] <= 3):  # Assuming valid seat types are 0, 1, 2, 3\n        raise ValueError(\"Field 'seatType' must be between 0 and 3.\")\n    \n    return True\n", "consign.service.ConsignServiceImpl.updateConsignRecord": "import uuid\nimport re\nfrom datetime import datetime\n\ndef is_valid(instance: dict) -> bool:\n    # Check presence of all fields and ensure they are not None\n    required_fields = [\n        'id', 'orderId', 'accountId', 'handleDate', 'targetDate', \n        'from', 'to', 'consignee', 'phone', 'weight', 'isWithin'\n    ]\n    for field in required_fields:\n        if field not in instance or instance[field] is None:\n            raise ValueError(f\"Field '{field}' is missing or None.\")\n    \n    # Data Type Check\n    if not isinstance(instance['id'], str):\n        raise TypeError(\"Field 'id' must be a string.\")\n    if not isinstance(instance['orderId'], str):\n        raise TypeError(\"Field 'orderId' must be a string.\")\n    if not isinstance(instance['accountId'], str):\n        raise TypeError(\"Field 'accountId' must be a string.\")\n    if not isinstance(instance['handleDate'], str):\n        raise TypeError(\"Field 'handleDate' must be a string.\")\n    if not isinstance(instance['targetDate'], str):\n        raise TypeError(\"Field 'targetDate' must be a string.\")\n    if not isinstance(instance['from'], str):\n        raise TypeError(\"Field 'from' must be a string.\")\n    if not isinstance(instance['to'], str):\n        raise TypeError(\"Field 'to' must be a string.\")\n    if not isinstance(instance['consignee'], str):\n        raise TypeError(\"Field 'consignee' must be a string.\")\n    if not isinstance(instance['phone'], str):\n        raise TypeError(\"Field 'phone' must be a string.\")\n    if not isinstance(instance['weight'], (float, int)):\n        raise TypeError(\"Field 'weight' must be a float or int.\")\n    if not isinstance(instance['isWithin'], bool):\n        raise TypeError(\"Field 'isWithin' must be a boolean.\")\n    \n    # Range Check\n    if instance['weight'] < 0:\n        raise ValueError(\"Field 'weight' must be non-negative.\")\n    \n    # Format Check\n    try:\n        uuid.UUID(instance['id'])\n    except ValueError:\n        raise ValueError(\"Field 'id' must be a valid UUID.\")\n    \n    try:\n        uuid.UUID(instance['orderId'])\n    except ValueError:\n        raise ValueError(\"Field 'orderId' must be a valid UUID.\")\n    \n    try:\n        uuid.UUID(instance['accountId'])\n    except ValueError:\n        raise ValueError(\"Field 'accountId' must be a valid UUID.\")\n    \n    try:\n        datetime.fromisoformat(instance['handleDate'])\n    except ValueError:\n        raise ValueError(\"Field 'handleDate' must be a valid ISO 8601 date.\")\n    \n    try:\n        datetime.fromisoformat(instance['targetDate'])\n    except ValueError:\n        raise ValueError(\"Field 'targetDate' must be a valid ISO 8601 date.\")\n    \n    phone_pattern = re.compile(r'^\\+?[1-9]\\d{1,14}$')\n    if not phone_pattern.match(instance['phone']):\n        raise ValueError(\"Field 'phone' must be a valid phone number.\")\n    \n    # Consistency Check\n    handle_date = datetime.fromisoformat(instance['handleDate'])\n    target_date = datetime.fromisoformat(instance['targetDate'])\n    if target_date <= handle_date:\n        raise ValueError(\"Field 'targetDate' must be after 'handleDate'.\")\n    \n    return True\n"}